/**                                                                                           //
 * Copyright (c) 2015-2016, The Kovri I2P Router Project                                      //
 *                                                                                            //
 * All rights reserved.                                                                       //
 *                                                                                            //
 * Redistribution and use in source and binary forms, with or without modification, are       //
 * permitted provided that the following conditions are met:                                  //
 *                                                                                            //
 * 1. Redistributions of source code must retain the above copyright notice, this list of     //
 *    conditions and the following disclaimer.                                                //
 *                                                                                            //
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list     //
 *    of conditions and the following disclaimer in the documentation and/or other            //
 *    materials provided with the distribution.                                               //
 *                                                                                            //
 * 3. Neither the name of the copyright holder nor the names of its contributors may be       //
 *    used to endorse or promote products derived from this software without specific         //
 *    prior written permission.                                                               //
 *                                                                                            //
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY        //
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    //
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL     //
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,       //
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,               //
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    //
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,          //
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF    //
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               //
 */

#define BOOST_TEST_DYN_LINK

#include <boost/test/unit_test.hpp>

#include <algorithm>
#include <cstdint>
#include <map>
#include <memory>
#include <string>
#include <vector>

#include "client/reseed.h"

#include "core/crypto/util/x509.h"

BOOST_AUTO_TEST_SUITE(SU3);

struct SU3Fixture {
  // A complete, healthy, SU3
  const std::vector<unsigned char> good_bytes {
    // 0-5: Magic value
    0x49, 0x32, 0x50, 0x73, 0x75, 0x33,
    // 6: Unused
    0x00,
    // 7: SU3 file format version (we skip this)
    0x00,
    // 8-9: Signature type
    0x00, 0x06,
    // 10-11: Signature length
    0x02, 0x00,  // 512
    // 12: Unused
    0x00,
    // 13: Version length
    0x10,
    // 14: Unused
    0x00,
    // 15: Signer ID length
    0x11,  // 17
    // 16-23: Content length
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x94,
    // 24: Unused
    0x00,
    // 25: File type
    0x00,  // ZIP
    // 26: Unused
    0x00,
    // 27: Content type
    0x03,  // Reseed
    // 28-39: Unused
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // 40-55: SU3 Version $(date %+s)
    0x31, 0x34, 0x36, 0x30, 0x30, 0x33, 0x38, 0x37,
    0x34, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // xx+ (56-72): Signer ID
    0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
    0x40, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x69, 0x32,
    0x70,  // anonimal@mail.i2p
    // xx+ (73-932): Content
    0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x91, 0x19, 0x87, 0x48, 0x4b, 0x29,
    0xda, 0xdd, 0x88, 0x02, 0x00, 0x00, 0x9f, 0x02, 0x00, 0x00, 0x3b, 0x00, 0x1c, 0x00, 0x72, 0x6f,
    0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x31, 0x6d, 0x41, 0x6d, 0x41, 0x47, 0x67,
    0x6b, 0x6d, 0x54, 0x77, 0x64, 0x67, 0x69, 0x44, 0x51, 0x55, 0x4d, 0x79, 0x37, 0x55, 0x55, 0x4f,
    0x39, 0x71, 0x78, 0x63, 0x56, 0x53, 0x73, 0x73, 0x57, 0x5a, 0x4c, 0x33, 0x71, 0x62, 0x53, 0x63,
    0x51, 0x72, 0x49, 0x67, 0x3d, 0x2e, 0x64, 0x61, 0x74, 0x55, 0x54, 0x09, 0x00, 0x03, 0x22, 0xd0,
    0x05, 0x57, 0x8d, 0x6b, 0x06, 0x57, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03, 0x00, 0x00,
    0x04, 0x0a, 0x00, 0x00, 0x00, 0x93, 0x9d, 0x9c, 0xc9, 0x9a, 0x7b, 0xfe, 0x98, 0x53, 0xd2, 0x0e,
    0xe3, 0xda, 0xb8, 0xe7, 0x3b, 0x8d, 0xd9, 0x2f, 0xd9, 0xe7, 0x26, 0xe9, 0x44, 0x09, 0xbc, 0x5b,
    0xf6, 0xa4, 0x79, 0x81, 0x8e, 0xd8, 0xed, 0x7f, 0xed, 0x81, 0x17, 0xd5, 0xf7, 0x5e, 0xbb, 0xfd,
    0xef, 0xd0, 0xd1, 0xfa, 0x7b, 0xcf, 0xbb, 0xe3, 0xab, 0xfe, 0x26, 0x95, 0xde, 0xb0, 0x38, 0x77,
    0xe9, 0xcf, 0x9c, 0x12, 0x3d, 0xcf, 0x98, 0xe4, 0x87, 0x8b, 0xfc, 0xb6, 0x6f, 0x90, 0x35, 0xa8,
    0x0a, 0x3d, 0xb5, 0x2f, 0x2f, 0xf3, 0x0b, 0xd7, 0xa7, 0x07, 0xcb, 0x14, 0xf8, 0xcf, 0xcc, 0xbd,
    0xd5, 0x61, 0x24, 0xb5, 0xca, 0xd4, 0xeb, 0x5d, 0x6a, 0xe3, 0x3f, 0xf5, 0x50, 0xf6, 0x7b, 0x79,
    0x7b, 0x2d, 0x57, 0x6c, 0x34, 0xbf, 0xca, 0xac, 0xb3, 0x47, 0x59, 0xf6, 0x5a, 0x32, 0xef, 0x6c,
    0x63, 0x17, 0x7f, 0xbe, 0xfe, 0x08, 0xbe, 0xb5, 0xb7, 0xde, 0x76, 0xce, 0x5f, 0x1a, 0x69, 0xfa,
    0x74, 0x93, 0x57, 0xc5, 0xdb, 0xe8, 0x40, 0x46, 0x27, 0xdf, 0x83, 0x57, 0x1f, 0x3f, 0x6a, 0xee,
    0x13, 0xe9, 0x37, 0x5a, 0xf6, 0x43, 0xcf, 0x6f, 0x3b, 0xbb, 0xe4, 0x93, 0x8f, 0x89, 0xb2, 0x1a,
    0x29, 0x2a, 0x92, 0x1b, 0x3d, 0x93, 0x4f, 0x48, 0x6d, 0x50, 0x0b, 0xf3, 0x6b, 0xe3, 0xe8, 0x71,
    0xac, 0x5e, 0x29, 0x1c, 0xf5, 0xeb, 0xc2, 0x2a, 0x03, 0xf5, 0x87, 0x06, 0x6a, 0xb9, 0xde, 0x4e,
    0x5c, 0x46, 0xce, 0xa6, 0x0f, 0xe7, 0x87, 0xd6, 0xd4, 0x2d, 0x8c, 0xcf, 0x0b, 0xc8, 0xaa, 0x5f,
    0x7a, 0x32, 0xf7, 0x75, 0x97, 0x7a, 0xc7, 0xdd, 0xe3, 0x8f, 0x18, 0xef, 0xed, 0xdb, 0xb6, 0xc1,
    0x4a, 0x26, 0xee, 0xc0, 0x93, 0x69, 0x7b, 0xb2, 0xcb, 0xce, 0x6e, 0xe6, 0xdd, 0xef, 0xc9, 0xbf,
    0x31, 0xda, 0x67, 0x7e, 0x8c, 0xdb, 0x89, 0xba, 0xcb, 0x0a, 0x12, 0x49, 0x27, 0x65, 0xde, 0x32,
    0x3e, 0x29, 0xdc, 0x58, 0xa5, 0x1a, 0xb5, 0xe8, 0x92, 0xb8, 0x11, 0x87, 0x68, 0x42, 0x7c, 0xe8,
    0xfb, 0x85, 0x0b, 0x0d, 0xa3, 0xbd, 0x32, 0x0a, 0x8b, 0xad, 0x67, 0x7f, 0x3d, 0x98, 0xc2, 0xc5,
    0xa1, 0x14, 0xc0, 0xf3, 0x61, 0xe3, 0x93, 0x27, 0x96, 0x73, 0x0a, 0x42, 0x95, 0x72, 0xea, 0xba,
    0x4c, 0x8b, 0xa7, 0x14, 0x9c, 0x69, 0x3d, 0x9a, 0x1d, 0xbc, 0xbe, 0x23, 0xd1, 0x60, 0xd7, 0xd7,
    0x66, 0xb9, 0x9d, 0x13, 0x67, 0x6b, 0xe5, 0xb3, 0xde, 0x15, 0x88, 0x3f, 0xf7, 0x38, 0x9d, 0x89,
    0xe1, 0xb0, 0xb5, 0x9b, 0x89, 0xd9, 0x34, 0xa3, 0x7c, 0xad, 0x4f, 0x8e, 0x6f, 0xbe, 0x7d, 0x5a,
    0x68, 0x50, 0x9d, 0x53, 0xca, 0xd0, 0x7b, 0x52, 0xbf, 0x53, 0xb4, 0xd3, 0x47, 0x4f, 0x6e, 0xca,
    0x87, 0xa8, 0xfe, 0x3f, 0x53, 0x4c, 0x0e, 0xab, 0x0a, 0x3c, 0x32, 0xef, 0x4a, 0x79, 0xe9, 0x9e,
    0xc9, 0x65, 0x7a, 0x69, 0x69, 0x93, 0x81, 0x27, 0x2b, 0x03, 0x0b, 0x03, 0x3b, 0x03, 0x10, 0x30,
    0x06, 0xbf, 0xdb, 0xca, 0xfd, 0x8f, 0x89, 0x95, 0x01, 0x0a, 0x98, 0x83, 0x83, 0x43, 0x19, 0xe2,
    0x59, 0x92, 0x13, 0x0b, 0x8a, 0x6d, 0x99, 0x9c, 0x9c, 0xad, 0x59, 0x32, 0xf2, 0x8b, 0x4b, 0x6c,
    0x79, 0x0d, 0x4d, 0x8c, 0xf4, 0x4c, 0xf4, 0x8c, 0x0c, 0x2c, 0xf4, 0x0c, 0x0d, 0x4d, 0xad, 0x99,
    0xb3, 0x53, 0x2b, 0x6d, 0x75, 0x0c, 0x73, 0x1d, 0x73, 0x1d, 0xdd, 0xd3, 0xb3, 0x73, 0x43, 0xca,
    0x53, 0xd2, 0x33, 0x5d, 0x02, 0x43, 0x7d, 0x2b, 0xcd, 0x43, 0x43, 0xfd, 0x2d, 0x0b, 0x2b, 0x92,
    0xc3, 0x82, 0x8b, 0x8b, 0xc3, 0xa3, 0x7c, 0x8c, 0x0b, 0x93, 0x82, 0x93, 0x03, 0x8b, 0x3c, 0xd3,
    0x6d, 0xad, 0x59, 0x0a, 0xf2, 0x8b, 0x4a, 0x6c, 0x59, 0x0d, 0x0d, 0x0c, 0x2d, 0xcd, 0xad, 0xb9,
    0x61, 0xb6, 0xb1, 0xf8, 0x85, 0x38, 0x07, 0x30, 0x28, 0x61, 0xb5, 0x04, 0x45, 0x07, 0x03, 0x83,
    0x0e, 0xd4, 0x4d, 0xbe, 0x41, 0xd6, 0xac, 0x79, 0xa9, 0x25, 0x9e, 0x29, 0xb6, 0x8c, 0x46, 0xd6,
    0x7c, 0x45, 0xf9, 0xa5, 0x25, 0xa9, 0x45, 0x7a, 0x65, 0xa9, 0x45, 0xc5, 0x99, 0xf9, 0x79, 0xb6,
    0x6c, 0x06, 0x7a, 0x96, 0x7a, 0x46, 0xa6, 0xd6, 0x53, 0xba, 0xfe, 0xff, 0xf5, 0x98, 0x7f, 0x35,
    0xe5, 0x53, 0xe2, 0xfb, 0x8e, 0x15, 0x95, 0x4b, 0xef, 0x06, 0x68, 0xb7, 0x59, 0x4e, 0x16, 0xf9,
    0x1a, 0xce, 0xcd, 0x60, 0xf4, 0x8b, 0x6f, 0x51, 0xb6, 0xd1, 0xdc, 0xc6, 0xb5, 0x8e, 0x4a, 0x2c,
    0x7b, 0xd8, 0x44, 0x8e, 0x5c, 0x79, 0x62, 0xc1, 0xbd, 0xc0, 0x68, 0xe5, 0x16, 0x57, 0xa1, 0x9d,
    0x73, 0x4a, 0xfc, 0x98, 0xb5, 0xce, 0x54, 0xaa, 0xff, 0x58, 0xce, 0x02, 0x00, 0x50, 0x4b, 0x01,
    0x02, 0x1e, 0x03, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x91, 0x19, 0x87, 0x48, 0x4b, 0x29, 0xda,
    0xdd, 0x88, 0x02, 0x00, 0x00, 0x9f, 0x02, 0x00, 0x00, 0x3b, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x00, 0x00, 0x00, 0x00, 0x72, 0x6f, 0x75, 0x74, 0x65,
    0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x31, 0x6d, 0x41, 0x6d, 0x41, 0x47, 0x67, 0x6b, 0x6d, 0x54,
    0x77, 0x64, 0x67, 0x69, 0x44, 0x51, 0x55, 0x4d, 0x79, 0x37, 0x55, 0x55, 0x4f, 0x39, 0x71, 0x78,
    0x63, 0x56, 0x53, 0x73, 0x73, 0x57, 0x5a, 0x4c, 0x33, 0x71, 0x62, 0x53, 0x63, 0x51, 0x72, 0x49,
    0x67, 0x3d, 0x2e, 0x64, 0x61, 0x74, 0x55, 0x54, 0x05, 0x00, 0x03, 0x22, 0xd0, 0x05, 0x57, 0x75,
    0x78, 0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x4b,
    0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x81, 0x00, 0x00, 0x00, 0xfd, 0x02,
    0x00, 0x00, 0x00, 0x00,
    // xx+ (933-1445): Signature
    0x66, 0x3c, 0x2f, 0x0a, 0xf4, 0x3f, 0x5c, 0x75, 0x4e, 0xc4, 0x6a, 0xdd, 0x4c, 0xd8, 0x18, 0x80,
    0x7f, 0xe4, 0xee, 0x8b, 0x3d, 0x0d, 0x97, 0xf1, 0x09, 0xfd, 0x22, 0xfc, 0x24, 0x5c, 0xb7, 0x27,
    0x7f, 0x0c, 0xd5, 0x5d, 0x57, 0xfc, 0x12, 0xf0, 0x31, 0x54, 0x37, 0x6b, 0x39, 0x24, 0x31, 0x98,
    0x85, 0xf1, 0xbe, 0xb9, 0xad, 0xbf, 0x2f, 0xbb, 0xd6, 0xd0, 0x8f, 0x08, 0xca, 0x55, 0x24, 0x87,
    0xc5, 0x8f, 0x71, 0xf7, 0xb6, 0x06, 0xda, 0x66, 0x24, 0x54, 0xf5, 0x18, 0x8d, 0xc1, 0xec, 0xfc,
    0x64, 0x5f, 0xef, 0xa5, 0xf8, 0xf9, 0x7c, 0x79, 0x65, 0x27, 0xa6, 0xaa, 0x9d, 0xe9, 0xba, 0xb8,
    0xf8, 0x38, 0x54, 0xd4, 0xcc, 0x09, 0x15, 0x17, 0x04, 0x45, 0xc9, 0x87, 0x9f, 0x38, 0xca, 0xf5,
    0x0d, 0xf0, 0xd3, 0x30, 0x88, 0x77, 0xca, 0x06, 0x77, 0x32, 0x1b, 0xd4, 0x26, 0x63, 0x3b, 0x0e,
    0xf4, 0xdf, 0xcc, 0xcb, 0xac, 0x43, 0x62, 0xc3, 0x81, 0xf0, 0xb3, 0x3f, 0xf8, 0x38, 0xa1, 0x57,
    0x31, 0x33, 0xa0, 0x01, 0x52, 0xf0, 0x0c, 0x1e, 0x17, 0x87, 0xa2, 0xa0, 0x76, 0xd6, 0x26, 0xb8,
    0xd5, 0xf1, 0xf6, 0x83, 0xc2, 0xf2, 0x2b, 0xbc, 0x2e, 0xfc, 0xe3, 0xef, 0x4e, 0xbe, 0x6c, 0xda,
    0x42, 0x38, 0x46, 0xc3, 0xd9, 0xf2, 0xbc, 0x19, 0xcb, 0xb0, 0x1e, 0x49, 0x75, 0x9a, 0x65, 0xa1,
    0x05, 0x83, 0xb6, 0xf9, 0xfe, 0x65, 0xb4, 0xeb, 0xa6, 0x1e, 0x73, 0x5d, 0x69, 0x8c, 0x11, 0xdb,
    0x4c, 0x74, 0xc3, 0xc3, 0x6e, 0x51, 0xb2, 0x60, 0xa8, 0xf6, 0x20, 0x30, 0xf1, 0xd7, 0xb7, 0x3f,
    0xeb, 0xf8, 0x1c, 0xe8, 0xbf, 0xba, 0x95, 0x82, 0x51, 0x54, 0xe8, 0x5f, 0x98, 0xf6, 0xe4, 0xbf,
    0x8b, 0x35, 0x69, 0xcd, 0x84, 0xae, 0x72, 0x3a, 0x10, 0xbd, 0xcd, 0x92, 0x77, 0xbe, 0xe7, 0x3d,
    0x11, 0x5a, 0xb3, 0x81, 0x1c, 0x21, 0x59, 0x20, 0x41, 0x7b, 0xc8, 0x4f, 0x83, 0x39, 0x02, 0xec,
    0x19, 0x70, 0x53, 0xb4, 0xbf, 0x00, 0x78, 0xf9, 0x29, 0xf1, 0x40, 0x63, 0x69, 0xa4, 0xa6, 0xcc,
    0x50, 0xf5, 0x07, 0x06, 0x3b, 0xe6, 0xfc, 0xf9, 0x2d, 0x13, 0x74, 0xd7, 0xc4, 0xd2, 0xf2, 0xa4,
    0x40, 0x6a, 0x03, 0xe7, 0x00, 0xe8, 0x8f, 0x42, 0xbd, 0x1d, 0xf1, 0xc3, 0x92, 0x1f, 0xd5, 0x09,
    0xda, 0x70, 0x2f, 0xb1, 0x17, 0xbc, 0xf5, 0x02, 0xa9, 0x54, 0x08, 0xcf, 0xe0, 0x57, 0x39, 0x2d,
    0x15, 0x55, 0xa6, 0x40, 0x8d, 0x25, 0xf8, 0xee, 0x3b, 0xd6, 0xe2, 0x31, 0x79, 0x5a, 0x79, 0x07,
    0xab, 0xe4, 0x31, 0xd7, 0xa6, 0x32, 0x38, 0xf8, 0xae, 0x35, 0xd4, 0xb4, 0xf1, 0x4b, 0xc9, 0x24,
    0xdd, 0x01, 0xe0, 0x23, 0x36, 0x0a, 0x48, 0x9e, 0xf6, 0x66, 0x22, 0x87, 0x8d, 0x47, 0x9f, 0x3e,
    0x3e, 0x12, 0xab, 0xa7, 0x27, 0xf5, 0x2a, 0x6d, 0xba, 0x62, 0xf1, 0xad, 0x1b, 0xdf, 0xe7, 0x9f,
    0xae, 0xe8, 0x7e, 0x17, 0xdb, 0x46, 0xe9, 0x44, 0x61, 0xda, 0x45, 0x74, 0x4d, 0x37, 0xc3, 0xa2,
    0xf3, 0xc8, 0xbe, 0x0a, 0xcd, 0x80, 0x17, 0xa1, 0xb5, 0x2d, 0x14, 0x1e, 0x66, 0xda, 0xd1, 0xf8,
    0xbc, 0x2f, 0x18, 0x46, 0x92, 0xe4, 0x80, 0x9f, 0x6f, 0x14, 0xc9, 0x04, 0xc3, 0x29, 0xe4, 0x57,
    0x9c, 0x73, 0xb5, 0x2b, 0xba, 0x8f, 0x06, 0x1b, 0x2b, 0x4f, 0x4e, 0x34, 0x2e, 0xc0, 0x7d, 0xf9,
    0x66, 0x7e, 0x97, 0x39, 0x8d, 0x12, 0x91, 0x46, 0x86, 0x64, 0x00, 0xc3, 0x6d, 0x3f, 0xb7, 0x89,
    0xa8, 0xea, 0xef, 0xff, 0xcf, 0x94, 0xde, 0x61, 0x89, 0xa3, 0x21, 0x69, 0xe9, 0xfb, 0x22, 0xa7,
    0x7f, 0xfc, 0x7c, 0x27, 0x90, 0xa0, 0xb3, 0x46, 0x9e, 0x25, 0xd3, 0xc6, 0x9b, 0xc6, 0x19, 0x1a,
  };

  // Signing key for verification (anonimal@mail.i2p)
  std::vector<unsigned char> signing_key {
    0x89, 0xe5, 0xa1, 0xc4, 0xb9, 0x17, 0x10, 0x4b, 0xfb, 0x75, 0x15, 0x3b, 0x3a, 0xa7, 0xca, 0xea,
    0x88, 0x40, 0xc0, 0x48, 0xa2, 0x59, 0x51, 0x9b, 0x4c, 0xf0, 0xda, 0xde, 0x35, 0x40, 0x43, 0x88,
    0x23, 0xfc, 0xbc, 0x09, 0x20, 0xfe, 0xd6, 0xf3, 0xfe, 0xe0, 0x39, 0x7a, 0xa1, 0xdd, 0x54, 0xf3,
    0x1d, 0x5a, 0x63, 0x8e, 0x2e, 0xf7, 0x8a, 0xf2, 0x31, 0xfb, 0xcd, 0x1a, 0x9b, 0x6e, 0xa3, 0x8f,
    0xed, 0x21, 0xaf, 0x56, 0xf5, 0x76, 0x24, 0x1c, 0x44, 0x8b, 0xa0, 0xb1, 0x0e, 0x64, 0x82, 0xf2,
    0x1e, 0xf1, 0x5a, 0x08, 0x92, 0xdc, 0xe5, 0xbf, 0x06, 0x29, 0x7e, 0xb7, 0xb0, 0x2c, 0x94, 0x65,
    0xd5, 0xa0, 0x00, 0x73, 0xa4, 0xf7, 0x29, 0x88, 0xca, 0xcf, 0xda, 0x2a, 0x5b, 0x0b, 0xbb, 0xf1,
    0x02, 0x2a, 0x81, 0x6f, 0x0e, 0x78, 0xee, 0xaa, 0xb2, 0x59, 0x48, 0xe7, 0x36, 0xe0, 0x8d, 0x97,
    0xd1, 0x0c, 0x71, 0xb0, 0xe8, 0x3b, 0xb5, 0x55, 0x7d, 0xed, 0x50, 0xee, 0x4e, 0x70, 0x2b, 0xff,
    0x4b, 0x29, 0xb9, 0x00, 0xe3, 0x06, 0x51, 0x31, 0x3f, 0xcc, 0xaf, 0xd2, 0x68, 0x4e, 0x0d, 0xe1,
    0xc9, 0x82, 0xee, 0x86, 0x73, 0x49, 0x08, 0x20, 0xfb, 0x13, 0x7f, 0xe2, 0x75, 0x62, 0xc5, 0x47,
    0xe7, 0x3f, 0x39, 0x67, 0x98, 0x28, 0xd1, 0x28, 0xe9, 0x4b, 0x35, 0xe0, 0x44, 0x12, 0x16, 0xd6,
    0x3f, 0x90, 0xf0, 0xbe, 0x50, 0xb7, 0x92, 0x7f, 0x2a, 0xc6, 0x6c, 0xfd, 0x2a, 0x4a, 0xd2, 0xdb,
    0x07, 0x1b, 0x16, 0x2d, 0xbc, 0x73, 0x82, 0x4d, 0x35, 0x3d, 0x9f, 0xca, 0x00, 0x39, 0x8a, 0xdd,
    0x87, 0x42, 0x6d, 0x28, 0x9e, 0x46, 0xd4, 0xf0, 0x02, 0xc0, 0xb0, 0x7b, 0xef, 0xf7, 0x0a, 0xb3,
    0x6c, 0xb9, 0x0f, 0xdc, 0xf3, 0xae, 0x16, 0xab, 0x18, 0xac, 0xfa, 0xcd, 0x7e, 0x6d, 0x97, 0xed,
    0xe0, 0xea, 0xcb, 0x25, 0x66, 0x5c, 0x02, 0xaf, 0x06, 0xe8, 0xbe, 0xbc, 0xfc, 0xc9, 0x87, 0x6b,
    0x3b, 0x23, 0xe7, 0xdd, 0xe8, 0x93, 0x32, 0xdb, 0xea, 0xe6, 0xf5, 0xaa, 0x80, 0x50, 0x6d, 0xae,
    0x31, 0x8f, 0xa0, 0xa7, 0xaa, 0xc1, 0x04, 0x85, 0x59, 0x46, 0xf8, 0xad, 0xdf, 0xed, 0x36, 0x8c,
    0xe7, 0x77, 0xe7, 0x43, 0xf4, 0x29, 0x59, 0x49, 0x6b, 0xd8, 0xf8, 0x76, 0x26, 0x34, 0xaa, 0xe2,
    0x42, 0xb1, 0x05, 0x4d, 0x48, 0x0b, 0x4c, 0x10, 0x58, 0x0c, 0x37, 0x1d, 0xd6, 0xa4, 0xdf, 0x87,
    0x07, 0x1d, 0x37, 0x9a, 0xbd, 0xb1, 0x8e, 0xa3, 0xb5, 0x68, 0x06, 0xcb, 0xd6, 0x34, 0x62, 0xec,
    0x6a, 0xa8, 0x64, 0x42, 0x2f, 0x45, 0x5d, 0x82, 0xbd, 0x00, 0xc0, 0x0f, 0xbc, 0xc2, 0x40, 0x28,
    0xf4, 0x5a, 0x94, 0x66, 0x82, 0x1e, 0xcd, 0x85, 0x20, 0x9a, 0x95, 0x2b, 0x0f, 0x10, 0x3c, 0xeb,
    0xea, 0x49, 0xfd, 0xf4, 0xc0, 0x0b, 0x63, 0x33, 0x89, 0x9c, 0x94, 0xf8, 0x0b, 0x9f, 0xcd, 0xf6,
    0x45, 0x8b, 0xea, 0x91, 0xb2, 0x6a, 0x2c, 0x48, 0xf2, 0xd8, 0x73, 0xea, 0x8a, 0x27, 0x36, 0x14,
    0x33, 0xe1, 0x13, 0x0d, 0x38, 0x9b, 0xf4, 0x34, 0xa3, 0x6f, 0x1b, 0x97, 0x4c, 0x79, 0x31, 0x98,
    0x95, 0x95, 0x58, 0x7b, 0xa4, 0x8e, 0xc9, 0x51, 0xfe, 0x55, 0x28, 0x05, 0xe7, 0x33, 0xab, 0xf8,
    0x1e, 0x0c, 0x33, 0xcf, 0x8d, 0x07, 0x57, 0x63, 0xa6, 0x41, 0x71, 0xba, 0x5a, 0x51, 0x7b, 0x06,
    0x35, 0x68, 0xcd, 0xd2, 0x35, 0xc5, 0xd9, 0x2b, 0xf7, 0x80, 0x67, 0x00, 0xd4, 0xd2, 0x0d, 0x19,
    0x25, 0xdd, 0x5b, 0x9d, 0xd9, 0x80, 0x6b, 0x15, 0x5a, 0x33, 0xff, 0xfc, 0xb8, 0x71, 0x04, 0xfb,
    0x78, 0x15, 0x6a, 0xe8, 0x95, 0x3a, 0x3c, 0xd2, 0x01, 0x3e, 0xc8, 0xc5, 0x81, 0xee, 0x0b, 0x85,
  };

  // Map the signature for verification
  kovri::core::PublicKey pubkey = signing_key.data();
  std::map<std::string, kovri::core::PublicKey> x509 {
    { "anonimal@mail.i2p", pubkey },
  };
};

class SU3FixtureImpl : SU3Fixture {
  const std::size_t offset, amount;
  const unsigned char byte;

 public:
  /// @brief Implements SU3 unit-test
  SU3FixtureImpl(
      const std::size_t offset = 0,
      const std::size_t amount = 0,
      const unsigned char byte = {})
      : offset(offset),
        amount(amount),
        byte(byte) {}
  ~SU3FixtureImpl() {}

  /// @brief Replaces good byte(s) with bad one(s), then implements SU3
  /// @return False on failure
  bool SU3Impl() {
    std::vector<unsigned char> bad_bytes = good_bytes;
    std::fill_n(bad_bytes.begin() + offset, amount, byte);
    std::string str(bad_bytes.begin(), bad_bytes.end());
    kovri::client::SU3 su3(str, x509);
    return su3.SU3Impl();
  }
};

// First, test that good stream is valid
BOOST_AUTO_TEST_CASE(GoodSU3) {
  SU3FixtureImpl su3;
  BOOST_CHECK(su3.SU3Impl());
}

// Now, test for bad bytes
BOOST_AUTO_TEST_CASE(BadMagic) {
  SU3FixtureImpl su3(3, 3, 0x41);  // Offset, amount, value
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadSigType) {
  SU3FixtureImpl su3(8, 2, 0x41);
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadSigLength) {
  SU3FixtureImpl su3(10, 2, 0x41);
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadVersionLength) {
  SU3FixtureImpl su3(13, 1, 0x0f);  // Too short
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadSignerIDLength) {
  SU3FixtureImpl su3(15, 1, 0x00);  // Null ID length
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadContentLength) {
  SU3FixtureImpl su3(16, 8, 0x00);  // Null content length
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadFileType) {
  SU3FixtureImpl su3(25, 1, 0x04);  // Type does not exist in spec
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadContentType) {
  SU3FixtureImpl su3(27, 1, 0x05);  // Type does not exist in spec
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadSignerID) {
  SU3FixtureImpl su3(56, 17, 0x41);  // Not an email address
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(NullSignerID) {
  SU3FixtureImpl su3(56, 17, 0x00);  // Null signer ID
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadContent) {
  SU3FixtureImpl su3(73, 16, 0x00);  // Invalid content
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_CASE(BadSignature) {
  SU3FixtureImpl su3(933, 16, 0x00);  // Invalid signature
  BOOST_CHECK(!su3.SU3Impl());
}

BOOST_AUTO_TEST_SUITE_END()
